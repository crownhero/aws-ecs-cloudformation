Parameters:
  ClusterName:
    Type: String
    Description: Name for the ECS cluster
#------------------------------------app1 PARAMETERS------------------------------------------------
  app1ServiceName:
    Type: String
    Description: Name for the ECS service

  app1TaskDefinitionName:
    Type: String
    Description: Name for the ECS task definition

  app1ContainerName:
    Type: String
    Description: Name for the container within the task definition

  app1Image:
    Type: String
    Description: Docker image URL for the container
  
  app1EnvironmentVariables1:
    Type: String
  app1EnvironmentVariables2:
    Type: String
  
  #------------------app3 PARAMETERS---------------------------------------------------------------

  app3ServiceName:
    Type: String
    Description: Name for the ECS service

  app3TaskDefinitionName:
    Type: String
    Description: Name for the ECS task definition

  app3ContainerName:
    Type: String
    Description: Name for the container within the task definition

  app3Image:
    Type: String
    Description: Docker image URL for the container

  app3EnvironmentVariables1:
    Type: String
  app3EnvironmentVariables2:
    Type: String
  
  #------------------------------------app2----------------------------------------------

  app2ServiceName:
    Type: String
    Description: Name for the ECS service

  app2TaskDefinitionName:
    Type: String
    Description: Name for the ECS task definition

  app2ContainerName:
    Type: String
    Description: Name for the container within the task definition

  app2Image:
    Type: String
    Description: Docker image URL for the container
  
  app2EnvironmentVariables1:
    Type: String
  app2EnvironmentVariables2:
    Type: String
  
  #---------------------VPC&SUBNETS---------------------------------------------------
  
  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: VPC id 

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnet IDs where the ALB will be deployed

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs where ECS services will be deployed

Resources:
  app1ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${app1ServiceName}-ECS-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        #- arn:aws:iam::${AWS::AccountId}:policy/SecretsManagerPolicy-ECSTaskExecution
  
  app3ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${app3ServiceName}-ECS-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        #- arn:aws:iam::${AWS::AccountId}:policy/SecretsManagerPolicy-ECSTaskExecution
  
  app2ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${app2ServiceName}-ECS-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      
  
  # SecretsManagerPolicy:
  #   Type: AWS::IAM::ManagedPolicy
  #   Properties:
  #     #PolicyName: !Sub ${ServiceName}-SecretsManager-Policy
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - secretsmanager:GetSecretValue
  #           Resource:
  #              - arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:waverlite_env_secrets-wJLScp:*
              


#----------------------------------CLUSTER DETAILS----------------------------------------------    
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

#--------------------------------TASK DEFINITION-----------------------------------------------------
  
  app1TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref app1TaskDefinitionName
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt app1ECSRole.Arn
      ContainerDefinitions:
        - Name: !Ref app1ContainerName
          Image: !Ref app1Image
          PortMappings:
            - ContainerPort: 80
          # Secrets:
          #   - Name: INF_WAVERLITE_app1_PRODUCT_KEY
          #     ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:waverlite_env_secrets-wJLScp:INF_WAVERLITE_app1_PRODUCT_KEY::"
          #   - Name: WT_KH_WAVERLITE_WEB_PRODUCT_KEY
          #     ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:waverlite_env_secrets-wJLScp:WT_KH_WAVERLITE_WEB_PRODUCT_KEY::"
          Environment:
          - Name: INF_WAVERLITE_app1_PRODUCT_KEY
            Value: !Ref app1EnvironmentVariables1
          - Name: WT_KH_WAVERLITE_WEB_PRODUCT_KEY
            Value: !Ref app1EnvironmentVariables2
  
  app3TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref app3TaskDefinitionName
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt app3ECSRole.Arn
      ContainerDefinitions:
        - Name: !Ref app3ContainerName
          Image: !Ref app3Image
          PortMappings:
            - ContainerPort: 80
          # Secrets:
          #   - Name: INF_WAVERLITE_app1_PRODUCT_KEY
          #     ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:waverlite_env_secrets-wJLScp:INF_WAVERLITE_app1_PRODUCT_KEY::"
          #   - Name: WT_KH_WAVERLITE_WEB_PRODUCT_KEY
          #     ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:waverlite_env_secrets-wJLScp:WT_KH_WAVERLITE_WEB_PRODUCT_KEY::"
          Environment:
          - Name: INF_WAVERLITE_app1_PRODUCT_KEY
            Value: !Ref app3EnvironmentVariables1
          - Name: WT_KH_WAVERLITE_WEB_PRODUCT_KEY
            Value: !Ref app3EnvironmentVariables2

  app2TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref app2TaskDefinitionName
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt app2ECSRole.Arn
      ContainerDefinitions:
        - Name: !Ref app2ContainerName
          Image: !Ref app2Image
          PortMappings:
            - ContainerPort: 80
          # Secrets:
          #   - Name: INF_WAVERLITE_app1_PRODUCT_KEY
          #     ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:waverlite_env_secrets-wJLScp:INF_WAVERLITE_app1_PRODUCT_KEY::"
          #   - Name: WT_KH_WAVERLITE_WEB_PRODUCT_KEY
          #     ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:waverlite_env_secrets-wJLScp:WT_KH_WAVERLITE_WEB_PRODUCT_KEY::"
          Environment:
          - Name: INF_WAVERLITE_app1_PRODUCT_KEY
            Value: !Ref app2EnvironmentVariables1
          - Name: WT_KH_WAVERLITE_WEB_PRODUCT_KEY
            Value: !Ref app2EnvironmentVariables2
  
  #----------------------------LOAD BALANCER SECURITY GROUPS---------------------------------------
  
  Ecsapp1SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https and database connection
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc
  
  Ecsapp3SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https and database connection
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc
  
  Ecsapp2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https and database connection
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc

#-------------------------------SERVICE LOAD BALANCERS-------------------------------------------------
  
  app1ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${app1ServiceName}-ALB
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref Ecsapp1SG
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: !Sub ${app1ServiceName}-ALB
  
  app3ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${app3ServiceName}-ALB
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref Ecsapp3SG
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: !Sub ${app3ServiceName}-ALB
  
  app2ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${app2ServiceName}-ALB
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: 
        - !Ref Ecsapp2SG
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: !Sub ${app2ServiceName}-ALB
      
#-------------------------------TARGET GROUPS--------------------------------------------------
  
  app1TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - app1ALB
    Properties:
      Name: !Sub ${app1ServiceName}-TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      TargetType: ip

  app3TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - app3ALB
    Properties:
      Name: !Sub ${app3ServiceName}-TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      TargetType: ip

  app2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - app2ALB
    Properties:
      Name: !Sub ${app2ServiceName}-TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      TargetType: ip
      
#----------------------------------LISTENERS----------------------------------------------      

  app1Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - app1ALB
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            StatusCode: "200"
      LoadBalancerArn: !Ref app1ALB
      Port: 80
      Protocol: HTTP
  
  app3Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: 
      - app3ALB
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            StatusCode: "200"
      LoadBalancerArn: !Ref app3ALB
      Port: 80
      Protocol: HTTP
  
  app2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: 
      - app2ALB
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            StatusCode: "200"
      LoadBalancerArn: !Ref app2ALB
      Port: 80
      Protocol: HTTP
  
 #------------------------------------LISTENER RULE--------------------------------------- 
  
  app1ListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    DependsOn:
      - app1ALB
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref app1TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref app1Listener
      Priority: 1
  
  app3ListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    DependsOn:
      - app3ALB
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref app3TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref app3Listener
      Priority: 1
  
  app2ListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    DependsOn:
      - app2ALB
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref app2TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref app2Listener
      Priority: 1

#-----------------------------------SERVICE-------------------------------------------
  
  Ecsapp1Service:
    Type: AWS::ECS::Service
    DependsOn:
      - app1ALB
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref app1ServiceName
      TaskDefinition: !Ref app1TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1  
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnetIds
          SecurityGroups : 
           - !GetAtt Ecsapp1SG.GroupId
      LoadBalancers: 
        - TargetGroupArn: !Ref app1TargetGroup
          ContainerPort: 80
          ContainerName: !Ref app1ContainerName

  Ecsapp3Service:
    Type: AWS::ECS::Service
    DependsOn:
      - app3ALB
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref app3ServiceName
      TaskDefinition: !Ref app3TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1  
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnetIds
          SecurityGroups: 
           - !GetAtt Ecsapp3SG.GroupId
      LoadBalancers: 
        - TargetGroupArn: !Ref app3TargetGroup
          ContainerPort: 80
          ContainerName: !Ref app3ContainerName

  Ecsapp2Service:
    Type: AWS::ECS::Service
    DependsOn:
      - app2ALB
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref app2ServiceName
      TaskDefinition: !Ref app2TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1  
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnetIds
          SecurityGroups : 
           - !GetAtt Ecsapp2SG.GroupId
      LoadBalancers: 
        - TargetGroupArn: !Ref app2TargetGroup
          ContainerPort: 80
          ContainerName: !Ref app2ContainerName

#------------------------------app1 SERVICE SCALING CONFIGURATIONS----------------------------------------------------
  
  app1ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - Ecsapp1Service
    Properties:
      MaxCapacity: 5  
      MinCapacity: 1
      ResourceId: !Sub "service/${ClusterName}/${app1ServiceName}"
      #RoleARN: !GetAtt "AutoscalingRole.Arn"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  app1ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - Ecsapp1Service
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref app1ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 10
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 10
            ScalingAdjustment: 4
    
  app1TargetTrackingScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - Ecsapp1Service
    Properties:
      PolicyName: cpu75-target-tracking-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref app1ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 65.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
      
#--------------------------------app3 SCALING CONFIGURATIONS-------------------------------------------------

  app3ScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      DependsOn:
        - Ecsapp3Service
      Properties:
        MaxCapacity: 5  
        MinCapacity: 1
        ResourceId: !Sub "service/${ClusterName}/${app3ServiceName}"
        #RoleARN: !GetAtt "AutoscalingRole.Arn"
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs

  app3ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - Ecsapp3Service
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref app3ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 10
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 10
            ScalingAdjustment: 4
    
  app3TargetTrackingScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - Ecsapp3Service
    Properties:
      PolicyName: cpu75-target-tracking-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref app3ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 65.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

#-------------------------------app2 SCALING CONFIGURATION-------------------------------------------

  app2ScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      DependsOn:
        - Ecsapp2Service
      Properties:
        MaxCapacity: 5  
        MinCapacity: 1
        ResourceId: !Sub "service/${ClusterName}/${app2ServiceName}"
        #RoleARN: !GetAtt "AutoscalingRole.Arn"
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs

  app2ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - Ecsapp2Service
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref app2ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 10
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 10
            ScalingAdjustment: 4
    
  app2TargetTrackingScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - Ecsapp2Service
    Properties:
      PolicyName: cpu75-target-tracking-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref app2ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 65.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
Outputs:
  app1ApplicationURL:
    Description: URL of the deployed application
    Value: !GetAtt app1ALB.DNSName
  app3ApplicationURL:
    Description: URL of the deployed application
    Value: !GetAtt app3ALB.DNSName
  app2ApplicationURL:
    Description: URL of the deployed application
    Value: !GetAtt app2ALB.DNSName

